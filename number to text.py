def NTT(n):
	ent=input ("english or hindi -: ").lower()
	def ntt(n):
	    one=["zero","one","two","three","four","five","six","seven","eight","nine"]
	    
	    tw=["_","eleven", "twelve","thirteen", "fourteen","fifteen","sixteen","seventeen","eighteen","nineteen",]
	    
	    tens=[" ","ten","twenty", "thirty", "forty","fifty","sixty","seventy","eighty","ninety"]
	    
	    gujarati = {1: "એક", 2: "બે", 3: "ત્રણ", 4: "ચાર", 5: "પાંચ", 6: "છ", 7: "સાત", 8: "આઠ", 9: "નવ", 10: "દસ", 11: "અગિયાર", 12: "બાર", 13: "તેર", 14: "ચૌદ", 15: "પંદર", 16: "સોળ", 17: "સત્તર", 18: "અઢાર", 19: "ઓગણીસ", 20: "વીસ", 21: "એકવીસ", 22: "બાવીસ", 23: "ત્રેવીસ", 24: "ચોવીસ", 25: "પંચવીસ", 26: "છવીસ", 27: "સત્તાવીસ", 28: "અઠ્ઠાવીસ", 29: "ઓગણત્રીસ", 30: "ત્રીસ", 31: "એકત્રીસ", 32: "બત્રીસ", 33: "ત્રેત્રીસ", 34: "ચોત્રીસ", 35: "પંત્રીસ", 36: "છત્રીસ", 37: "સડત્રીસ", 38: "અડત્રીસ", 39: "ઓગણચાલીસ", 40: "ચાલીસ", 41: "એકતાલીસ", 42: "બેતાલીસ", 43: "ત્રેતાલીસ", 44: "ચુમ્માલીસ", 45: "પિસ્તાલીસ", 46: "છેતાલીસ", 47: "સુદતાલીસ", 48: "અડતાલીસ", 49: "ઓગણપચાસ", 50: "પચાસ", 51: "એકાવન", 52: "બાવન", 53: "ત્રેપન", 54: "ચોપન", 55: "પંચાવન", 56: "છપ્પન", 57: "સત્તાવન", 58: "અઠ્ઠાવન", 59: "ઓગણસાઠ", 60: "સાઠ", 61: "એકસઠ", 62: "બાસઠ", 63: "ત્રેસઠ", 64: "ચોસઠ", 65: "પાંસઠ", 66: "છ્યાસઠ", 67: "સડસઠ", 68: "અડસઠ", 69: "ઓગણસિત્તેર", 70: "સિત્તેર", 71: "એકોતેર", 72: "બોતેર", 73: "ત્રેતેર", 74: "ચુમ્મોતેર", 75: "પંચોતેર", 76: "છોતેર", 77: "સિત્યોતર", 78: "ઇઠ્યોતર", 79: "ઓગણ્યાસી", 80: "એંસી", 81: "એક્યાસી", 82: "બ્યાસી", 83: "ત્ર્યાસી", 84: "ચોર્યાસી", 85: "પંચ્યાસી", 86: "છ્યાસી", 87: "સત્ત્યાસી", 88: "અઠ્યાસી", 89: "ઓગણનવ્વાં", 90: "નેવું", 91: "એકાણું", 92: "બાણું", 93: "ત્રાણું", 94: "ચોરાણું", 95: "પંચાણું", 96: "છિયાનું", 97: "સત્તાણું", 98: "અઠ્ઠાણું", 99: "નવ્વાણું", 100: "સો"}
	    
	    marathi={1: "एक", 2: "दोन", 3: "तीन", 4: "चार", 5: "पाच", 6: "सहा", 7: "सात", 8: "आठ", 9: "नऊ", 10: "दहा", 11: "अकरा", 12: "बारा", 13: "तेरा", 14: "चौदा", 15: "पंधरा", 16: "सोळा", 17: "सतरा", 18: "अठरा", 19: "एकोणीस", 20: "वीस", 21: "एकवीस", 22: "बावीस", 23: "तेवीस", 24: "चोवीस", 25: "पंचवीस", 26: "सव्वीस", 27: "सत्तावीस", 28: "अठ्ठावीस", 29: "एकोणतीस", 30: "तीस", 31: "एकतीस", 32: "बत्तीस", 33: "तेहेतीस", 34: "चौतीस", 35: "पस्तीस", 36: "छत्तीस", 37: "सदतीस", 38: "अडतीस", 39: "एकोणचाळीस", 40: "चाळीस", 41: "एक्केचाळीस", 42: "बेचाळीस", 43: "त्रेचाळीस", 44: "चव्वेचाळीस", 45: "पंचेचाळीस", 46: "सेहेचाळीस", 47: "सत्तेचाळीस", 48: "अठ्ठेचाळीस", 49: "एकोणपन्नास", 50: "पन्नास", 51: "एक्कावन्न", 52: "बावन्न", 53: "त्रेपन्न", 54: "चोपन्न", 55: "पंचावन्न", 56: "छप्पन्न", 57: "सत्तावन्न", 58: "अठ्ठावन्न", 59: "एकोणसाठ", 60: "साठ", 61: "एकसष्ठ", 62: "बासष्ठ", 63: "त्रेसष्ठ", 64: "चौसष्ठ", 65: "पासष्ठ", 66: "सहासष्ठ", 67: "सदुसष्ठ", 68: "अडुसष्ठ", 69: "एकोणसत्तर", 70: "सत्तर", 71: "एक्काहत्तर", 72: "बहात्तर", 73: "त्र्याहत्तर", 74: "चौर्‍याहत्तर", 75: "पंच्याहत्तर", 76: "शहात्तर", 77: "सत्याहत्तर", 78: "अठ्ठ्याहत्तर", 79: "एकोणऐंशी", 80: "ऐंशी", 81: "एक्याऐंशी", 82: "ब्याऐंशी", 83: "त्र्याऐंशी", 84: "चौर्‍याऐंशी", 85: "पंच्याऐंशी", 86: "शहाऐंशी", 87: "सत्त्याऐंशी", 88: "अठ्ठ्याऐंशी", 89: "एकोणनव्वद", 90: "नव्वद", 91: "एक्क्याण्णव", 92: "ब्याण्णव", 93: "त्र्याण्णव", 94: "चौर्‍याण्णव", 95: "पंच्याण्णव", 96: "शहाण्णव", 97: "सत्त्याण्णव", 98: "अठ्ठ्याण्णव", 99: "नव्व्याण्णव", 100: "शंभर"}
	    
	    sanskrit= {1:"एकम्",2:"द्वे",3:"त्रीणि",4:"चत्वारि",5:"पञ्च",6:"षट्",7:"सप्त",8:"अष्ट",9:"नव",10:"दश",11:"एकादश",12:"द्वादश",13:"त्रयोदश",14:"चतुर्दश",15:"पञ्चदश",16:"षोडश",17:"सप्तदश",18:"अष्टादश",19:"नवदश",20:"विंशतिः",21:"एकविंशतिः",22:"द्वाविंशतिः",23:"त्रयोविंशतिः",24:"चतुर्विंशतिः",25:"पञ्चविंशतिः",26:"षड्विंशतिः",27:"सप्तविंशतिः",28:"अष्टाविंशतिः",29:"नवविंशतिः",30:"त्रिंशत्",31:"एकत्रिंशत्",32:"द्वात्रिंशत्",33:"त्रयस्त्रिंशत्",34:"चतुस्त्रिंशत्",35:"पञ्चत्रिंशत्",36:"षट्त्रिंशत्",37:"सप्तत्रिंशत्",38:"अष्टात्रिंशत्",39:"नवत्रिंशत्",40:"चत्वारिंशत्",41:"एकचत्वारिंशत्",42:"द्विचत्वारिंशत्",43:"त्रिचत्वारिंशत्",44:"चतुश्चत्वारिंशत्",45:"पञ्चचत्वारिंशत्",46:"षट्चत्वारिंशत्",47:"सप्तचत्वारिंशत्",48:"अष्टचत्वारिंशत्",49:"नवचत्वारिंशत्",50:"पञ्चाशत्",51:"एकपञ्चाशत्",52:"द्विपञ्चाशत्",53:"त्रिपञ्चाशत्",54:"चतुःपञ्चाशत्",55:"पञ्चपञ्चाशत्",56:"षट्पञ्चाशत्",57:"सप्तपञ्चाशत्",58:"अष्टपञ्चाशत्",59:"नवपञ्चाशत्",60:"षष्टिः",61:"एकषष्टिः",62:"द्विषष्टिः",63:"त्रिषष्टिः",64:"चतुःषष्टिः",65:"पञ्चषष्टिः",66:"षट्षष्टिः",67:"सप्तषष्टिः",68:"अष्टषष्टिः",69:"नवषष्टिः",70:"सप्ततिः",71:"एकसप्ततिः",72:"द्विसप्ततिः",73:"त्रिसप्ततिः",74:"चतुःसप्ततिः",75:"पञ्चसप्ततिः",76:"षट्सप्ततिः",77:"सप्तसप्ततिः",78:"अष्टसप्ततिः",79:"नवसप्ततिः",80:"अशीतिः",81:"एकाशीतिः",82:"द्व्यशीतिः",83:"त्र्यशीतिः",84:"चतुरशीतिः",85:"पञ्चाशीतिः",86:"षडशीतिः",87:"सप्ताशीतिः",88:"अष्टाशीतिः",89:"नवाशीतिः",90:"नवतिः",91:"एकनवतिः",92:"द्विनवतिः",93:"त्रिनवतिः",94:"चतुर्नवतिः",95:"पञ्चनवतिः",96:"षण्नवतिः",97:"सप्तनवतिः",98:"अष्टनवतिः",99:"नवनवतिः",100:"शतम्"}


	    hindi= {1: "एक", 2: "दो", 3: "तीन", 4: "चार", 5: "पाँच", 6: "छह", 7: "सात", 8: "आठ", 9: "नौ", 10: "दस", 11: "ग्यारह", 12: "बारह", 13: "तेरह", 14: "चौदह", 15: "पंद्रह", 16: "सोलह", 17: "सत्रह", 18: "अठारह", 19: "उन्नीस", 20: "बीस", 21: "इक्कीस", 22: "बाईस", 23: "तेईस", 24: "चौबीस", 25: "पच्चीस", 26: "छब्बीस", 27: "सत्ताईस", 28: "अट्ठाईस", 29: "उनतीस", 30: "तीस", 31: "इकत्तीस", 32: "बत्तीस", 33: "तैंतीस", 34: "चौंतीस", 35: "पैंतीस", 36: "छत्तीस", 37: "सैंतीस", 38: "अड़तीस", 39: "उनतालीस", 40: "चालीस", 41: "इकतालीस", 42: "बयालीस", 43: "तैंतालीस", 44: "चौवालीस", 45: "पैंतालीस", 46: "छियालीस", 47: "सैंतालीस", 48: "अड़तालीस", 49: "उनचास", 50: "पचास", 51: "इक्यावन", 52: "बावन", 53: "तिरेपन", 54: "चौवन", 55: "पचपन", 56: "छप्पन", 57: "सत्तावन", 58: "अट्ठावन", 59: "उनसाठ", 60: "साठ", 61: "इकसठ", 62: "बासठ", 63: "तिरेसठ", 64: "चौंसठ", 65: "पैंसठ", 66: "छियासठ", 67: "सड़सठ", 68: "अड़सठ", 69: "उनहत्तर", 70: "सत्तर", 71: "इकहत्तर", 72: "बहत्तर", 73: "तिहत्तर", 74: "चौहत्तर", 75: "पचहत्तर", 76: "छिहत्तर", 77: "सतहत्तर", 78: "अठहत्तर", 79: "उन्यासी", 80: "अस्सी", 81: "इक्यासी", 82: "बयासी", 83: "तिरासी", 84: "चौरासी", 85: "पचासी", 86: "छियासी", 87: "सत्तासी", 88: "अठासी", 89: "नवासी", 90: "नब्बे", 91: "इक्यानवे", 92: "बानवे", 93: "तिरानवे", 94: "चौरानवे", 95: "पंचानवे", 96: "छियानवे", 97: "सत्तानवे", 98: "अट्ठानवे", 99: "निन्यानवे", 100: "सौ"}
	    tho=[" हजार"," હજાર"," सहस्त्रं"]
	    hu=[" सौ"," સૌ"," शे"," शतं"]
	    la=[" लाख"," લાખ"," लश्रं"]#
	    v=""
	    m=""
	    ld=""
	    if ent=="hindi":
	    	d=hindi
	    	v=tho[0]
	    	m=hu[0]
	    	ld=la[0]
	    elif ent=="gujarati":
	    	d=gujarati
	    	v=tho[1]
	    	m=hu[1]
	    	ld=la[1]
	    elif ent=="marathi":
	    	d=marathi
	    	v=tho[0]
	    	m=hu[2]
	    	ld=la[0]
	    elif ent=="sanskrit":
	    	d=sanskrit 
	    	v=tho[1]
	    	m=hu[3]
	    	ld=la[2]
	    else:
	    	print("not working")
	    
	    
	    if ent == "english" and n<100:
	         	if n<10:
	         		return(one[n])
	         	elif 11<=n and n<20:
	         		n=n-10
	         		return(tw[n])
	         	elif 20<=n and n<100 or n==10:
	          	   a=n//10
	          	   b=n%10
	          	   if b==0:
	          	   	return(tens[a])
	          	   else:
	          	   	return(tens[a]+" "+one[b])
	    elif ent !="english"  and n<100:
	    	return(d.get(n))           
	    elif 100<=n and n<1000:
	          a=n//100
	          b=n%100
	          if b==0:
	               if ent =="english":
	               	return(one[a]+" hundred")
	               elif ent=="marathi" and n==100:
	               	return(d.get(n))
	               elif ent !="english":
	               	return(d.get(a)+m)
	          else:
	              if ent=="english":
	              	return(one[a]+" hundred"+"  "+ntt(b))
	              elif ent !="english":
	              	return(d.get(a)+m+"  "+ntt(b))
	    elif 1000<=n and n<10000:
	          a=n//1000
	          r=n%1000
	          if r==0:
	               if ent =="english":
	               	return(one[a]+" thousand")
	               else :
	               	return(d.get(a)+v)
	          else:
	              if ent=="english":
	              	return(one[a]+" thousand"+"  "+ntt(r))
	              else:
	              	return(d.get(a)+v+"  "+ntt(r))
	    
	    elif 10000<=n and n<=100000:
	          if ent=="english":
	          	a=n//10000
	          	r=n%10000
	          else:
	          	a=n//1000
	          	r=n%1000
	          if r==0:
	              if ent=="english":
	              	return(tens[a]+"thousand")
	              else:
	              	return(d.get(a)+v)
	          elif a==1 and r!=0:
	              R=str(r)
	              e=R[0]
	              e=int(e)
	              c=r-(e*1000)
	              if c==0:
	              	return(tw[e]+" "+'thousand')
	              else:	
	                  return(tw[e]+" "+"thousand"+" "+ntt(c))
	          else:
	              if ent=="english":
	              	return(tens[a]+" "+ntt(r))
	              else:
	              	return(d.get(a)+v+"  "+ntt(r))
	    elif 100000<=n and n<1000000:
	          a=n//100000
	          r=n%100000
	          if r==0:
	               if ent =="english":
	               	return(one[a]+" lakh")
	               else :
	               	return(d.get(a)+ld)
	          else:
	              if ent=="english":
	              	return(one[a]+" lakh"+"  "+ntt(r))
	              else:
	              	return(d.get(a)+ld+"  "+ntt(r))
	    elif 1000000<=n and n<=10000000:
	          if ent=="english":
	          	a=n//1000000
	          	r=n%1000000
	          else:
	          	a=n//100000
	          	r=n%100000
	          if r==0:
	              if ent=="english":
	              	return(tens[a]+"lakh")
	              else:
	              	return(d.get(a)+ld)
	          elif a==1 and r!=0:
	              R=str(r)
	              e=R[0]
	              e=int(e)
	              c=r-(e*100000)
	              if c==0:
	              	return(tw[e]+" "+"lakh")
	              else:	
	                  return(tw[e]+" "+"lakh"+" "+ntt(c))
	          else:
	              if ent=="english":
	              	return(tens[a]+" "+ntt(r))
	              else:
	              	return(d.get(a)+ld+"  "+ntt(r))
	    else:
	        return (" number out of range ")
	return(ntt(n))	 
while True:
	v=input ("enter value -:")
	if v.isdigit()==False:
		print("enter numbers only and \nit should be less then 1cr")
	else:
		v=int(v)
		break
b=NTT(v)
print(b)



